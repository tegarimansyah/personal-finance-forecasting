package main

import (
	"bufio"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/BurntSushi/toml"
	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

// Months Data
var months []string = []string{
	"January", "February",
	"March", "April",
	"May", "June",
	"July", " August",
	"September", "October",
	"November", "December",
}

// MonthlyBudget describe single entity struct
type MonthlyBudget struct {
	Name              string `toml:"name"`
	Amount            int    `toml:"amount"`
	IncludeFirstMonth bool   `toml:"include_first_month,omitempty"`
}

// AdditionalBudget for specific month
type AdditionalBudget struct {
	Name   string
	Amount int
	Month  int
}

// func (budget *AdditionalBudgetList) AddItem(name string, amount int, month int){
// 	budget = append(budget, {name, amount, monmonth})
//     return box.Items
// }

// Toml to Go auto generated by https://xuri.me/toml-to-go/
type tomlConfig struct {
	Title         string `toml:"title"`
	InitialAmount int    `toml:"initial_value"`
	InitialMonth  int    `toml:"initial_month"`
	LastMonth     int    `toml:"last_month"`
	Monthly       struct {
		Income       []MonthlyBudget `toml:"income"`
		IncomeTotal  int             `toml:"income_total,omitempty"`
		Expense      []MonthlyBudget `toml:"expense"`
		ExpenseTotal int             `toml:"expense_total,omitempty"`
	} `toml:"monthly"`
	AdditionalBudget struct {
		Income  []AdditionalBudget `toml:"income,omitempty"`
		Expense []AdditionalBudget `toml:"expense,omitempty"`
	} `toml:"additional_budget,omitempty"`
}

func sum(budgets []MonthlyBudget) int {
	sumValue := 0
	for _, budget := range budgets {
		sumValue += budget.Amount
	}
	return sumValue
}

func saveTOML(name string, config tomlConfig) {
	f, err := os.Create(name + ".toml")
	if err != nil {
		// failed to create/open the file
		log.Fatal(err)
	}
	if err := toml.NewEncoder(f).Encode(config); err != nil {
		// failed to encode
		log.Fatal(err)
	}
	if err := f.Close(); err != nil {
		// failed to close the file
		log.Fatal(err)
	}
}

func getAdditionalBudget(config tomlConfig) {
	// Initiate console input reader
	reader := bufio.NewReader(os.Stdin)
	p := message.NewPrinter(language.Indonesian)

	for {
		p.Print("\n> ")
		text, err := reader.ReadString('\n')
		if err != nil {
			p.Printf("Some error Occured: %s", err)
		}
		if text == "\n" {
			break
		}

		data := strings.SplitN(text, ";", 3)
		if len(data) != 3 {
			p.Println("Invalid input, please make sure you comply the format:")
			p.Printf("Month Number[%d-%d]; Value; Name\n", config.InitialMonth, config.LastMonth)
			p.Println("or just enter to next section")
			continue
		}

		name := strings.TrimSpace(data[2])
		month, err := strconv.ParseInt(data[0], 10, 32)
		amount, err := strconv.ParseInt(
			strings.TrimSpace(data[1]),
			10, 64)
		if err != nil {
			p.Printf("Some error Occured: %s", err)
			continue
		}
		if !(int(month) >= config.InitialMonth && int(month) <= config.LastMonth) {
			p.Println(int(month) >= config.InitialMonth, int(month) <= config.LastMonth)
			p.Printf("Invalid month input, please make sure in between %s and %s", config.InitialMonth, config.LastMonth)
			continue
		}

		p.Printf("Get %d in %s from %s", amount, months[month-1], name)
	}
}

func main() {
	// Formating number to Indonesian thousand separator
	// Refer to https://godoc.org/golang.org/x/text/language#Tag for another language
	p := message.NewPrinter(language.Indonesian)

	// Export data from toml
	var config tomlConfig
	filename := "plan1.toml"

	if _, err := toml.DecodeFile(filename, &config); err != nil {
		p.Println(err)
		return
	}
	p.Printf("Forecast Report for: %s\n", config.Title)

	// Getting monthly budget
	monthlyIncomeSum := sum(config.Monthly.Income)
	monthlyExpenseSum := sum(config.Monthly.Expense)
	config.Monthly.IncomeTotal = monthlyIncomeSum
	config.Monthly.ExpenseTotal = monthlyExpenseSum
	p.Printf("Total Monthly Income: %d\nTotal Monthly Expense: %d\n\n",
		monthlyIncomeSum, monthlyExpenseSum)

	// Ask if any additional income in specific month
	p.Printf("Add additional income with format:\nMonth Number[%d-%d]; Value; Name", config.InitialMonth, config.LastMonth)
	// var budget AdditionalBudgetList

	getAdditionalBudget(config)

	p.Println("Done")

	// Ask if any additional expense in specific month

	// Display Forecasting
	p.Printf("Forecasting from %s to %s [%d months]",
		months[config.InitialMonth-1],
		months[config.LastMonth-1],
		config.LastMonth-config.InitialMonth+1,
	)

	// Ask to save data
	saveTOML("coba1", config)
}
